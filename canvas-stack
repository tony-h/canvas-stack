#! /bin/bash

## Configurable session vars
#--------------------------------------
HTTP_PORT=80
HTTPS_PORT=443
ENV=env
#--------------------------------------

cd $(dirname $0)
canvas_dir=$(pwd)/canvas-lms
use_local_image=false

cs_docker() {
    echo "$@"
    docker "$@"
}


cs_help_build() {
    cat <<EOF
Usage: mm build IMAGE

IMAGE = web|db|cache|haproxy

EOF
}

cs_build() {
    case $1 in
        web)
            cs_docker build -t canvas-stack/canvas:local docker-canvas
            ;;
        db)
            cs_docker build -t canvas-stack/db:local docker-postgresql
            ;;
        cache)
            cs_docker build -t canvas-stack/cache:local docker-redis
            ;;
        dev)
            cs_docker build -t canvas-stack/dev:local docker-dev
            ;;
        haproxy)
            cs_docker build -t canvas-stack/haproxy:local docker-haproxy
            ;;
        *)
            cs_help build
            ;;
    esac
}

cs_url() {
  echo "Finding network ports for the container named 'web'"

  port_http=$(docker port web 80 | cut -d: -f2)
  port_https=$(docker port web 443 | cut -d: -f2)

  if which docker-machine >/dev/null 2>&1
  then
    echo "Found \"docker-machine\", guessing you're not on Linux. Getting ip address from VM."
    addr=$(docker-machine ip)
  else
    echo "No \"docker-machine\" found, guessing you're on Linux. Using localhost."
    addr="127.0.0.1"
  fi

  echo ""
  echo "Canvas addresses:"
  echo "  http://${addr}:${port_http}/"
  echo "  https://${addr}:${port_https}/"
}

cs_image_name() {
    if [ "$use_local_image" = true ]; then
        echo "$1:local"
    else
        echo $1
    fi
}

cs_container_name() {
    if [ "$use_local_image" = true ]; then
        echo "l$1"
    else
        echo $1
    fi
}

docker_run() {
    local container=$(cs_container_name $2)
    local image=$(cs_image_name $1)
    local options=$3

    if ! container_exists $container ; then
		# If web, use the user-defined ports
		if [ "$2" = "haproxy" ]; then
			local command="docker run --env-file=$ENV -d -p $HTTP_PORT:$HTTP_PORT -p $HTTPS_PORT:$HTTPS_PORT $options --name=$container $image"
		else
			local command="docker run --env-file=$ENV -d -P $options --name=$container $image"
		fi
		echo $command
		$command || true
    else
        docker start $container
    fi
}

docker_run_db() {
    docker_run canvas-stack/db db "--volumes-from=$(cs_container_name db-data)"
}

docker_run_cache() {
    docker_run canvas-stack/cache cache
}

docker_run_web() {
    docker_run canvas-stack/canvas web "--volumes-from=$(cs_container_name web-data) --link $(cs_container_name db):db --link $(cs_container_name cache):cache"
}

docker_run_jobs() {
    local image=$(cs_image_name canvas-stack/canvas)
    local command="docker run --env-file=$ENV -d -P --volumes-from=$(cs_container_name web-data) --link=$(cs_container_name db):db --link=$(cs_container_name cache):cache --name=jobs $image /opt/canvas-lms/script/canvas_init run"
    echo $command
    $command || true
}

docker_run_haproxy() {
    docker_run canvas-stack/haproxy haproxy "--link $(cs_container_name web):web"
}

container_exists() {
    docker inspect "$1" > /dev/null 2>&1
}

cs_start_data() {
    if ! container_exists $(cs_container_name web-data) ; then
        docker run -v /var/log/apache2 -v /opt/canvas-lms/log -v /opt/canvas-lms/tmp/files --name=$(cs_container_name web-data) ubuntu:12.04
    fi

    if ! container_exists $(cs_container_name db-data) ; then
        docker run -v /var/lib/postgresql/9.1/main --name=$(cs_container_name db-data) ubuntu:12.04
    fi
}

cs_help_start() {
    cat <<EOF
Usage: mm start COMMAND

Commands
    all     Start all service containers
    cache   Start the Redis container
    data    Start data volume containers
    db      Start the PostgreSQL container
    jobs    FIXME
    web     Start the Canvas container
    haproxy Start the HAProxy container
EOF
}

cs_start() {
    case $1 in
        all)
            docker_run_db
            docker_run_cache
            docker_run_web
            docker_run_haproxy
            ;;
        data)
            cs_start_data
            ;;
        db)
            docker_run_db
            ;;
        cache)
            docker_run_cache
            ;;
        jobs)
            docker_run_jobs
            ;;
        web)
            docker_run_web
            ;;
        haproxy)
            docker_run_haproxy
            ;;
        *)
            cs_help start
            ;;
    esac
}

cs_init_schema() {
    local image=$(cs_image_name canvas-stack/canvas)
    echo "Schema setup is bugged and needs to run twice."
    echo "Setting up schema for the first time. Output in init_schema.1.txt"
    docker run --rm --env-file=$ENV -w /opt/canvas-lms --link=$(cs_container_name db):db --link=$(cs_container_name cache):cache $image bundle exec rake db:initial_setup >&2 2> init_schema.1.txt
    echo "Second time's the charm. Output in init_schema.2.txt"
    docker run --rm --env-file=$ENV -w /opt/canvas-lms --link=$(cs_container_name db):db --link=$(cs_container_name cache):cache $image bundle exec rake db:initial_setup >&2 2> init_schema.2.txt
}


cs_initdb() {
    local image=$(cs_image_name canvas-stack/db)
    docker run --rm -t -i --env-file=$ENV --user=root --volumes-from=$(cs_container_name db-data) $image /bin/bash /root/initdb
}


cs_boot() {
    cs_start_data
    cs_initdb
    cs_start db
    cs_start cache
    cs_init_schema
    cs_start web
    cs_start haproxy
    cs_url
}

cs_stop() {
    case $1 in
        services)
            for X in web cache db haproxy; do
                echo "Stopping & removing $X..."
                docker stop $X
                docker rm $X
            done
            ;;
        data)
            for X in db-data web-data; do
                echo "Stopping & removing $X..."
                docker rm $X
            done
            ;;
        *)
            cs_help stop
            ;;
    esac
}

cs_help_main() {
    cat <<EOF
Usage: mm [OPTIONS] COMMAND

Utilities FIXME

Options
    -l, --local  Use images with tag :local

Commads:
    boot   First time use. Takes up the whole system
    build  Build local docker images
    help   Display help information
    initdb Create the postgres cluster, roles and databases
    init-schema Initialize the database schema and insert initial data
    pull   Pull new versions of docker images
    rails  FIXME
    rake   FIXME
    reboot Stop & remove web, cache, db services, pull new images, restart.
    reset  Stop & remove web, cache, db services; remove web-data and db-data, pull new images, restart.
    start  Start one or all docker containers
    url    Print the url from which you can access canvas
EOF
}

cs_help_fixme() {
    echo "FIXME To be documented ..."
}

cs_help() {
    case $1 in
        build)
            cs_help_build
            ;;
        boot)
            cs_help_fixme
            ;;
        help)
            cs_help_fixme
            ;;
        initdb)
            cs_help_fixme
            ;;
        init-schema)
            cs_help_fixme
            ;;
        pull)
            cs_help_fixme
            ;;
        rails)
            cs_help_fixme
            ;;
        rails-dev)
            cs_help_fixme
            ;;
        rake)
            cs_help_fixme
            ;;
        start)
            cs_help_start
            ;;
        stop)
            cs_help_fixme
            ;;
        *)
            cs_help_main
            ;;
    esac
}


if [ "$1" = "--local" -o "$1" = "-l" ]; then
    use_local_image=true
    shift
fi
command=$1
shift || true
case $command in
    build)
        cs_build "$@"
        ;;
    boot)
        cs_boot
        ;;
    help)
        cs_help "$@"
        ;;
    initdb)
        cs_initdb
        ;;
    init-schema)
        cs_init_schema
        ;;
    pull)
        for X in db canvas cache haproxy tools dev; do
			docker pull canvas-stack/$X
        done
        ;;
    rails)
        image=$(cs_image_name canvas-stack/canvas)
        docker run --rm -t -i -P --env-file=$ENV --link db:db -w /opt/canvas-lms $image bundle exec rails "$@"
        ;;
    rails-dev)
        docker run --rm -t -i -p 3000:3000 --env-file=$ENV -e RAILS_ENV=development --link db:db --link cache:cache -w /opt/canvas-lms canvas-stack/canvas bundle exec rails "$@"
        ;;
    dev)
        docker run -t -i -p 3001:3000 --name=$(cs_container_name dev) --env-file=$ENV -e RAILS_ENV=development --link db:db --link cache:cache -w /opt/canvas-lms canvas-stack/dev
        ;;
    rake)
        docker run --rm -t -i -P --env-file=$ENV -e RAILS_ENV=development -v $canvas_dir:/canvas-lms --link db:db -w /canvas-lms canvas-stack/canvas bundle exec rake "$@"
        ;;
    reboot)
        cs_stop services
        for X in db canvas cache haproxy; do
			docker pull canvas-stack/$X
        done
        cs_boot
        ;;
    reset)
        cs_stop services
        cs_stop data
        for X in db canvas cache haproxy; do
			docker pull canvas-stack/$X
        done
        cs_boot
        ;;
    start)
        cs_start "$@"
        ;;
    stop)
        cs_stop "$@"
        ;;
    url)
        cs_url
        ;;
    *)
        cs_help
        ;;
esac
